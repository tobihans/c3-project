version: 2.1

orbs:
  slack: circleci/slack@4.12.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl "https://api.thisdb.com/v1/tkKxpzEq4eav0uHNZ8jGwXSn/migration_${CIRCLE_WORKFLOW_ID:0:7}" -H "X-Api-Key: $THIS_DB_API_KEY") 

            if [[ "$success" -eq "1" ]]; 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
          - frontend-build
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: 
          - frontend/node_modules
          key: frontend-build
      # - slack/notify:
      #     event: fail
      #     template: basic_fail_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
          - backend-build
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: 
          - backend/node_modules
          key: backend-build
      # - slack/notify:
      #     event: fail
      #     template: basic_fail_1

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
          - frontend-build
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm install
            npm run test
      # - slack/notify:
      #     event: fail
      #     template: basic_fail_1
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
          - backend-build
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install
            npm run test
      # - slack/notify:
      #     event: fail
      #     template: basic_fail_1
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
          - frontend-build
      - run:
          name: Scan front-end
          command: |
            cd frontend
            npm install
            npm audit fix --force
            npm audit --audit-level=critical || true
      # - slack/notify:
      #     event: fail
      #     template: basic_fail_1

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
          - backend-build
      - run:
          name: Scan back-end
          command: |
            cd backend
            npm install
            npm audit fix --force
            npm audit --audit-level=critical || true
      # - slack/notify:
      #     event: fail
      #     template: basic_fail_1

  deploy-infrastructure:
    docker: 
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar and gzip
          command: yum update && yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cat \<<END >.circleci/ansible/inventory.txt
            [web]
            $(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress'\
              --filters 'Name=tag:project,Values=udapeople' --output text
            )
            END
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: cytopia/ansible
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 35:31:aa:e0:4b:70:83:ce:5d:32:61:a6:77:d4:48:9b
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk update && apk add tar gzip
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
      - image: sleavely/node-awscli:14.x
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl "https://api.thisdb.com/v1/tkKxpzEq4eav0uHNZ8jGwXSn/migration_${CIRCLE_WORKFLOW_ID:0:7}" \
                -H "X-Api-Key: $THIS_DB_API_KEY" \
                -d '0'
            else
              curl "https://api.thisdb.com/v1/tkKxpzEq4eav0uHNZ8jGwXSn/migration_${CIRCLE_WORKFLOW_ID:0:7}" \
                -H "X-Api-Key: $THIS_DB_API_KEY" \
                -d '1'
            fi
      - destroy-environment

  deploy-frontend:
    docker:
      - image: sleavely/node-awscli:14.x
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apt update
            apt upgrade -y
            apt install -y tar gzip software-properties-common
            apt-add-repository ppa:ansible/ansible -y
            apt install -y ansible
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress'\
              --filters 'Name=tag:project,Values=udapeople' --output text | head -n 1
            )
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL=${API_URL}" >> frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment 
      - revert-migrations

  deploy-backend:
    docker:
      - image: sleavely/node-awscli:14.x
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 35:31:aa:e0:4b:70:83:ce:5d:32:61:a6:77:d4:48:9b
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apt update
            apt upgrade -y
            apt install -y tar gzip software-properties-common
            apt-add-repository ppa:ansible/ansible -y
            apt install -y ansible
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build

            cd ..
            tar -C backend -czvf artifact.tar.gz .
            mkdir -p .circleci/ansible/roles/deploy/files
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files/

            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt

            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment 
      - revert-migrations

  smoke-test:
    docker:
      - image: sleavely/node-awscli:14.x
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apt update
            apt upgrade -y
            apt install -y curl tar gzip software-properties-common
            apt-add-repository ppa:ansible/ansible -y
            apt install -y ansible
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress'\
              --filters 'Name=tag:project,Values=udapeople' --output text | head -n 1
            )
            export API_URL="http://${BACKEND_IP}:3030"

            if curl "${API_URL}/api/status" | grep "ok"
            then
                exit 0
            else
                exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment 
      - revert-migrations


  cloudfront-update:
    docker:
      - image: sleavely/node-awscli:14.x
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apt update
            apt upgrade -y
            apt install -y curl tar gzip software-properties-common
            apt-add-repository ppa:ansible/ansible -y
            apt install -y ansible
      - run:
          name: Update cloudfront distribution
          command: |
            # The Cloudfront distribution is created/updated
            # There is no need to bind it to workflows
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name udapeople-cloudfront \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - destroy-environment 
      - revert-migrations

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Remove old stacks and files
          command: |
            aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text \
              | sed -r 's/\s+/\n/g' \
              | grep udapeople \
              | grep -v ${CIRCLE_WORKFLOW_ID:0:7} \
              | sed -r 's/udapeople-(frontend|backend)-//g' \
              | uniq \
              | xargs -I{} \
              bash -c "aws s3 rm s3://udapeople-{} --recursive;aws cloudformation delete-stack --stack-name udapeople-backend-{};aws cloudformation delete-stack --stack-name udapeople-frontend-{};"

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: 
          - build-frontend
      - test-backend:
          requires: 
          - build-backend
      - scan-backend:
          requires: 
          - build-backend
      - scan-frontend:
          requires:
          - build-frontend
      - deploy-infrastructure:
          requires: 
            - test-frontend
            - test-backend
            - scan-frontend
            - scan-backend
          filters:
            branches:
              only:
                - master
      - configure-infrastructure:
          requires: 
            - deploy-infrastructure
      - run-migrations:
          requires: 
            - configure-infrastructure
      - deploy-frontend:
          requires:
            - run-migrations
      - deploy-backend:
          requires:
            - run-migrations
      - smoke-test:
          requires:
            - deploy-backend
            - deploy-frontend
      - cloudfront-update:
          requires:
            - smoke-test
      - cleanup:
          requires:
            - cloudfront-update

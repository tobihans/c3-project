version: 2.1

orbs:
  slack: circleci/slack@4.12.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       # Add parameter here     
#     steps:
#       - run:
#           name: Revert migrations
#           # Add when this will run
#           command: |
#             # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#             SUCCESS = 1
#             if(( $SUCCESS==1 )); 
#             then
#             #  cd ~/project/backend
#             #  npm install
#             #  Add revert code here. You can find this in the Getting Started section.
#               exit 1
#             fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
          - frontend-build
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: 
          - frontend/node_modules
          key: frontend-build
      # - slack/notify:
      #     event: fail
      #     template: basic_fail_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
          - backend-build
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: 
          - backend/node_modules
          key: backend-build
      # - slack/notify:
      #     event: fail
      #     template: basic_fail_1

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
          - frontend-build
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm install
            npm run test
      # - slack/notify:
      #     event: fail
      #     template: basic_fail_1
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
          - backend-build
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install
            npm run test
      # - slack/notify:
      #     event: fail
      #     template: basic_fail_1
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
          - frontend-build
      - run:
          name: Scan front-end
          command: |
            cd frontend
            npm install
            npm audit fix --force
            npm audit --audit-level=critical || true
      # - slack/notify:
      #     event: fail
      #     template: basic_fail_1

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
          - backend-build
      - run:
          name: Scan back-end
          command: |
            cd backend
            npm install
            npm audit fix --force
            npm audit --audit-level=critical || true
      # - slack/notify:
      #     event: fail
      #     template: basic_fail_1

  deploy-infrastructure:
    docker: 
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar and gzip
          command: yum update && yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cat \<<END >.circleci/ansible/inventory.txt
            [web]
            $(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress'\
              --filters 'Name=tag:project,Values=udapeople' --output text
            )
            END
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: cytopia/ansible
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 35:31:aa:e0:4b:70:83:ce:5d:32:61:a6:77:d4:48:9b
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk update && apk add tar gzip
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
      - image: sleavely/node-awscli:14.x
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl "https://api.thisdb.com/v1/tkKxpzEq4eav0uHNZ8jGwXSn/migration_${CIRCLE_WORKFLOW_ID:0:7}" \
                -H "X-Api-Key: $THIS_DB_API_KEY" \
                -d '1'
            else
              curl "https://api.thisdb.com/v1/tkKxpzEq4eav0uHNZ8jGwXSn/migration_${CIRCLE_WORKFLOW_ID:0:7}" \
                -H "X-Api-Key: $THIS_DB_API_KEY" \
                -d '0'
            fi
      - destroy-environment

  deploy-frontend:
    docker:
      - image: sleavely/node-awscli:14.x
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt update && sudo apt install -y python3 tar gzip
            pip install ansible
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress'\
              --filters 'Name=tag:project,Values=udapeople' --output text | head -n 1
            )
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}" >> frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment 

  deploy-backend:
    docker:
      - image: sleavely/node-awscli:14.x
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 35:31:aa:e0:4b:70:83:ce:5d:32:61:a6:77:d4:48:9b
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            sudo apt update && sudo apt install -y python3 tar gzip
            pip install ansible
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build

            cd ..
            tar -C backend -czvf artifact.tar.gz .
            mkdir -p .circleci/ansible/roles/deploy/files
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files/

            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            echo << pipeline.id >> == ${CIRCLE_WORKFLOW_ID}
            cat inventory.txt

            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment 

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  
#
#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  
#
# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: 
          - build-frontend
      - test-backend:
          requires: 
          - build-backend
      - scan-backend:
          requires: 
          - build-backend
      - scan-frontend:
          requires:
          - build-frontend
      - deploy-infrastructure:
          requires: 
            - test-frontend
            - test-backend
            - scan-frontend
            - scan-backend
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: 
            - deploy-infrastructure
      - run-migrations:
          requires: 
            - configure-infrastructure
      - deploy-frontend:
          requires:
            - run-migrations
      - deploy-backend:
          requires:
            - run-migrations
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
